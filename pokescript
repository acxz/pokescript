#!/usr/bin/env bash

program=$(readlink -f "$0")
program_dir=$(dirname "$program")
# directory where all the text files exist
pokemon_text_dir="$program_dir/pokemon_texts"

#Function that prints out the help text
_help() {
    echo "pokescript: Show Pokemon sprites in the terminal"
    echo ""
    echo "Usage: pokescript [OPTION] [POKEMON NAME]"
    printf "  %-20s\t%-54s\n" \
        "-h, --help" "Print this help" \

    echo ""
    echo "Shiny: prepend \"s(hiny):\" to POKEMON"
    echo "default: use shiny ratio of 1/8192"

    echo ""

    echo "Gender: append \"+m(ale)/+f(emale)\" to POKEMON"
    echo "default: use 50% gender ratio"

    echo ""

    echo "Random: use \"random{,GEN,...}\" for POKEMON"
    echo "can add comma separated list for random pokemon from specified gens"
    echo "note: specifying a gender for random is a suggestion as"
    echo "random pokemon may have gender restrictions"
    echo ""

    echo "Examples: pokescript pikachu"
    echo "          pokescript s:nidoran-f+f nidoran-m"
    echo "          pokescript s:bulbasaur+m ns:pikachu+f venusaur"
    echo "          pokescript charizard-mega-x+male s:ho-oh moltres-galar"
    echo "          pokescript random s:pikachu-gmax"
    echo "          pokescript random,1,3+f s:random,4,1"
    echo "          pokescript type-null farfetchd sirfetchd"
}

# Handling command line arguments
case "$#" in
    0)
        # display help if no arguments are given
        _help
        echo ""
        echo "You forgot to mention any Pokemon! See help."
        exit
        ;;
    *)
        # Future support for big sprites and flag parsing
        pokemon_start_idx=1
        # Future support for true gender
        true_gender=0

        if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
            _help
            exit
        fi

        # Parse pokemon
        pokemon_texts=()
        for pokemon_desc in "${@:$pokemon_start_idx}"; do
            # Parse for shiny
            IFS=':' read -ra pokemon_desc_arr <<< "$pokemon_desc"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                shiny_str=''
            else
                shiny_str=${pokemon_desc_arr[0]}
                pokemon=${pokemon_desc_arr[1]}
            fi

            # Parse for gender
            IFS='+' read -ra pokemon_desc_arr <<< "$pokemon"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                gender_str=''
            else
                pokemon=${pokemon_desc_arr[0]}
                gender_str=${pokemon_desc_arr[1]}
            fi

            if [ -z "$shiny_str" ]; then
                # Random shiny chance
                shiny_str='not-shiny'
                shiny_rate=8192
                shiny_chance=$(shuf -i 1-"$shiny_rate" -n 1)
                if [ "$shiny_chance" = "$shiny_rate" ]; then
                    shiny_str='shiny'
                fi
            fi

            if [ $shiny_str = 'shiny' ] || [ $shiny_str = 's' ]; then
                _type=shiny
            elif [ $shiny_str = 'not-shiny' ] || [ $shiny_str = 'ns' ]; then
                _type=regular
            else
                _help
                echo ""
                echo "Incorrect shiny specifier! See help."
                exit
            fi

            # Parse for random
            # Delimit pokemon on comma to see if we are using random gens
            is_random=0
            IFS=',' read -ra pokemon_random_arr <<< "$pokemon"
            pokemon=${pokemon_random_arr[0]}

            if [ "$pokemon" = 'random' ]; then
                is_random=1
                gen_ids=(1 152 251 387 494 650 722 810 898)
                gen_start=0
                gen_end=8

                # Delimit pokemon on comma to see if we are using random gens
                if [ ${#pokemon_random_arr[@]} != 1 ]; then
                    use_random_gen=1
                    for (( _idx=1; _idx<${#pokemon_random_arr[@]}; _idx++ )); do
                        gens+=("${pokemon_random_arr[_idx]}")
                    done

                    # Pick random gen
                    random_gen=$(shuf -e "${gens[@]}" -n 1)
                    gen_end=${random_gen}
                    gen_start=$((gen_end-1))
                fi

                # Choose random pokemon id
                pokemon_id=$(shuf -i "${gen_ids[gen_start]}"-"${gen_ids[gen_end]}" -n 1)
                # TODO: get id of pokemon w/o net
                pokemon=$(curl -s \
                    "https://pokeapi.co/api/v2/pokemon/$pokemon_id" | \
                    jq -r '.species.name')

                # TODO
                # Check to see if the pokemon has forms and if so random off that
                # upstream issue, pokeapi should list forms on pokemon_species
                # POST

                # But wait there is more
                # If random let's figure out which form to use
                # TODO
            fi

            # obtain texts
            if [ "$gender_str" = 'female' ] || [ "$gender_str" = 'f' ]; then
                # Only limited number is exclusively female,
                # thus need to do a check to see if female exists
                if [[ -f "$pokemon_text_dir/$_type/female/$pokemon" ]]; then
                    pokemon_text="$pokemon_text_dir/$_type/female/$pokemon"
                else
                    pokemon_text="$pokemon_text_dir/$_type/$pokemon"
                fi
            else
                pokemon_text="$pokemon_text_dir/$_type/$pokemon"
            fi

            pokemon_texts+=("${pokemon_text}")
        done
        ;;
esac

# Stitch pokemon text and display
if [ ${#pokemon_texts[@]} != 1 ]; then

    for _i in "${pokemon_texts[@]}"; do
        # Get size of each pokemon
        largest_line=$(awk '{print $0}' <(sed 's/\x1b\[[^@-~]*[@-~]//g' "${_i}") | sort -nr | head -1)
        blank_line=$(echo "${largest_line}" | sed -r 's/./ /g')
        blank_lines+=("${blank_line}")
        height=$(wc -l < "${_i}")
        heights+=("${height}")
        (( height > max_height )) && max_height=${height}
    done

    paste_str='paste '
    for _loop_num in "${!pokemon_texts[@]}"; do
        # Get height diff
        height_diff=$((max_height - heights[_loop_num]))

        if [ ${height_diff} != 0 ]; then

            # Create string to pad pokemon with
            pad_string="${blank_lines[_loop_num]}"
            for (( _hd=1; _hd<height_diff; _hd++ )); do
                pad_string="${pad_string}\n${blank_lines[_loop_num]}"
            done

            sed_string="1i\\${pad_string}"
            paste_str="${paste_str} <(sed \"${sed_string}\" ${pokemon_texts[_loop_num]})"
        else
            paste_str="${paste_str} ${pokemon_texts[_loop_num]}"
        fi

    done

    eval "${paste_str}"

else
    cat "${pokemon_texts[0]}"
fi
